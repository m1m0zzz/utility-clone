# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [Release]
        c_compiler: [cl, clang, gcc]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            release_branch: windows
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            release_branch: macos
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            package_name: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            package_name: clang
            release_branch: linux
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
      with:
        # include JUCE folder
        submodules: true

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "release-dir=${{ github.workspace }}/build/Source/UtilityClone_artefacts/Release" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies for Ubuntu
      # https://github.com/juce-framework/JUCE/blob/master/docs/Linux%20Dependencies.md
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install ${{ matrix.package_name }} \
          libasound2-dev libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev  \
          libfreetype6-dev \
          libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.0-dev \
          libglu1-mesa-dev mesa-common-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Clean Release Folder (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        rm '${{ steps.strings.outputs.release-dir }}/Utility clone_SharedCode.lib'

    - name: Clean Release Folder (Mac/Linux)
      if: matrix.os == 'macos-latest' || (matrix.os == 'ubuntu-latest' && matrix.c_compiler != 'gcc')
      run: |
        ls -l ${{ steps.strings.outputs.release-dir }}
        rm '${{ steps.strings.outputs.release-dir }}/libUtility clone_SharedCode.a'

    # TODO: submodulesが含まれるの lib ディレクトリがコピーされている？
    - name: Deploy to branch
      if: matrix.c_compiler != 'gcc'
      uses: s0/git-publish-subdir-action@v2.6.0
      env:
        REPO: self
        BRANCH: release/${{ matrix.release_branch }}
        FOLDER: ${{ steps.strings.outputs.release-dir }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CLEAR_GLOBS_FILE:
          \**/*
          \!.git
          ${{ steps.strings.outputs.release-dir }}/VST3/*
          ${{ steps.strings.outputs.release-dir }}/Standalone/*
          ${{ steps.strings.outputs.release-dir }}/AU/*

